const express = require('express');
const path = require('path');
const router = express.Router();
const connectToDatabase = require('../config/dbconfig');

// Middleware to parse JSON data
router.use(express.json());

// Route to handle checkout data
router.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../views/checkout.html'));
});

router.post('/', async (req, res) => {
    const { cart, totalItems, totalPrice, deliveryAgent, paymentMethod } = req.body;

    // Validate the received data
    if (!cart || !Array.isArray(cart) || cart.length === 0) {
        return res.status(400).json({ message: 'Invalid cart data' });
    }

    if (!deliveryAgent || !paymentMethod) {
        return res.status(400).json({ message: 'Delivery agent and payment method are required' });
    }

    // Example: Log the received data (for debugging)
    const session = req.session;
    console.log('Checkout Data:', {
        cart,
        totalItems,
        totalPrice,
        deliveryAgent,
        paymentMethod,
        session
    });

    // Process the checkout data (e.g., save to database, send confirmation email, etc.)
    // Here, we'll assume it's processed successfully.




    try {
        const connection = await connectToDatabase();

        // Step 1: Insert the user as a Customer
        const insertCustomerQuery = `
            INSERT INTO Customer (UserID, LoyaltyPoints)
            OUTPUT INSERTED.CustomerID 
            VALUES (?, 10);
        `;
        const customerInsertResult = await connection.query(insertCustomerQuery, [session.UserID]);
        const CustomerID = customerInsertResult[0].CustomerID; // Retrieve the autogenerated CustomerID
        console.log(`CustomerID of the inserted customer : ${CustomerID}`);


        //Step 2: Insert the Order placed by User
        let deliveryAddress = req.session.Address;
        const insertOrderQuery = `
        INSERT INTO Orders (CustomerID, TotalPrice,DeliveryAddress,PaymentMethod)
        OUTPUT INSERTED.OrderID 
        VALUES (?,?,?,?);
        `;
        const OrderInsertResult = await connection.query(insertOrderQuery, [CustomerID, totalPrice, deliveryAddress, paymentMethod]);
        const OrderID = OrderInsertResult[0].OrderID; // Retrieve the autogenerated orderid
        console.log(`OrderID of the inserted customer : ${OrderID}`);


        //Step 3: Insert the PaymentDetails of the order
        //getting the paymentID
        const paymentMethodQuery = `
        Select PaymentID from Payment where PaymentMethod = ?;
        `;
        const paymentMethodResult = await connection.query(paymentMethodQuery, [paymentMethod]);
        const PaymentID = paymentMethodResult[0].PaymentID; // Retrieve the autogenerated orderid
        console.log(`PaymentID of the inserted customer : ${PaymentID}`);

        //inserting record
        const insertOrderDetailsQuery = `
        INSERT INTO PaymentDetail (PaymentID, CustomerID,OrderID)
        VALUES (?,?,?);
        `;
        const OrderDetailsResult = await connection.query(insertOrderDetailsQuery, [PaymentID, CustomerID, OrderID]);


        //Step 4:Insert the Delivery details of the order
        const deliveryAgentQuery = `
        Select AgentID from DeliveryAgent where Name = ?;
        `;
        const DeliveryAgentResult = await connection.query(deliveryAgentQuery, [deliveryAgent]);
        const AgentID = DeliveryAgentResult[0].AgentID; // Retrieve the agentID
        console.log(`Agent Id  : ${AgentID}`);
        
        
        const insertOrderDeliveryQuery = `
        INSERT INTO OrderDelivery (OrderID,AgentID)
        VALUES (?,?);
        `;
        const OrderDeliveryResult = await connection.query(insertOrderDeliveryQuery, [OrderID, AgentID]);
        
        // Step 5: Breakdown the order into items and insert into OrderItems table
        try {
            for (const item of cart) {
              
                // Insert the item into the OrderItems table
                const menuItemQuery = `
                select MenuID,RestaurantID from Menu where ItemName = ?
                `;
                const menuItemResult = await connection.query(menuItemQuery, [item.name]);
                const MenuID = menuItemResult[0].MenuID; // Retrieve the menuId
                const RestaurantID = menuItemResult[0].RestaurantID; // Retrieve the restaurantID
                console.log(`MenuId of inserted item ${MenuID}`,`RestaurantID of menu item ${RestaurantID}`);
                // console.log(item.quantity,item.price);
               
                const insertOrderItemQuery = `
                INSERT INTO OrderItems (OrderID, MenuID, RestaurantID, Quantity, Price)
                VALUES (?, ?, ?, ?, ?);
                `;
                await connection.query(insertOrderItemQuery, [
                    OrderID,        // OrderID from previous step
                    MenuID,    // MenuID of the item
                    RestaurantID, // RestaurantID of the item
                    item.quantity,  // Quantity of the item
                    item.price      // Price of the item
                ]);

                console.log(`Inserted item into OrderItems: ${JSON.stringify(item)}`);
            }
            console.log('All items from the cart have been inserted into OrderItems table.');
        } catch (err) {
            console.error('Error inserting items into OrderItems table:', err);
        }



    } catch (err) {
        console.log(err);
    }




    // Redirect to a checkout summary page
    res.status(200).json({
        message: 'Checkout successful',
        summary: {
            cart,
            totalItems,
            totalPrice,
            deliveryAgent,
            paymentMethod,
            session
        }
    });
});

// Export the router
module.exports = router;
